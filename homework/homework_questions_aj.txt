1. What is responsible for defining the routes of the games resource?
1. server.js and create_router.js files. The routes are defined using Express router's Router object, which allows to modularise a set of routes. createRouter function takes in the games array(gamesCollection), creates a router obj, defines a set of routes on the router obj, returns the router. Then, server.js is going to create a gamesRouter and delegate the routing to it for games resource using the following code:
const gamesRouter = createRouter(gamesCollection)
app.use('/api/games', gamesRouter);

2. What do you notice about the folder structure? Whats the client responsible for? Whats the server responsible for?
2. Client and server are treated as two separate applications. Client has a new file in src called services, that holds js code responsible for interacting with the web server, which in turn communicates with database.
// The client is responsible for making requests to the server through routes(server/router obj, http verb, path, handler callback) specified on the server side. Server handles http requests. Request(req) and response(res) objects are used to access data that was sent with post request, or decide how we respond to the request.

3.What are the the responsibilities of server.js?
3. Import Express library, call express() to create an express object that offers methods required for writting a web server. Import boddy parser, to extract the body from POST request and make it accessible on req.body. Require MongoClient and router. Relaxes CORS policy. Then enables connection to Mongo DB database data collection, and creates and implements gamesRouter with data collection as argument.

4.What are the responsibilities of the gamesRouter?
4. Helps modularise the creation of routes and makes it also more manageable. Requires express library and ObjectId obj from Mongo DB. createRouter variable is pointed to the function that takes in games collection from Mongo DB datatabase. Server object (app) is replaced with (router) obj, but all route structure adhere to RESTful. Database games_hub collection object has database methods such as .insertOne or .deleteOne that are implemented on input data in the body of a callback function.


5. What process does the the client (front-end) use to communicate with the server?
5. Fetching.

6. What optional second argument does the fetch method take? And what is it used for in this application? Hint: See Using Fetch on the MDN docs?
6. Fetch method fetches a JSON file across the network. The simplest use of fetch() takes one argument — the path to the resource you want to fetch — and returns a promise containing the response (a Response object).
This is just an HTTP response, not the actual JSON. To extract the JSON body content from the response, we use the json() method (defined on the Body mixin, which is implemented by both the Request and Response objects.)
The fetch() method can optionally accept a second parameter, an init object that allows you to control a number of different settings. In the case of this application, init object provides info on what http method is used, the request body containing user input from form data, and headers (postGame), or just an http method (deleteGame).

7.Which of the games API routes does the front-end application consume (i.e. make requests to)?
7. /api/games - Index (GET)
   /api/games/create - (POST)
   /api/games/:id - Destroy(DELETE)

8. What are we using the MongoDB Driver for?
8. To provide both callback-based and Promise-based interaction with MongoDB from server.js

9. Why do we need to use ObjectId from the MongoDB driver?
9. To uniquely identify the document before applying CRUD actions on it. For example, when we post data(game obj) to database through webserver, we first wait for res obj which will have an automatically assigned ObjectId, and then emit an event sending the res obj to GamesGrid.vue, where it will be pushed to an array of games(already having an ObjectId). We can reference this ObjectId later if we want to delete or update db data.
